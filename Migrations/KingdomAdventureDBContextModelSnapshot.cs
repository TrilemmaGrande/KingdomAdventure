// <auto-generated />
using System;
using KingdomAdventure.Models.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KingdomAdventure.Migrations
{
    [DbContext(typeof(KingdomAdventureDBContext))]
    partial class KingdomAdventureDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.EnemyNPC", b =>
                {
                    b.Property<int>("EnemyNPCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnemyNPCID"));

                    b.Property<double?>("AtkMagic")
                        .HasColumnType("float");

                    b.Property<double?>("AtkMelee")
                        .HasColumnType("float");

                    b.Property<double?>("AtkPierce")
                        .HasColumnType("float");

                    b.Property<bool>("Boss")
                        .HasColumnType("bit");

                    b.Property<double?>("Crit")
                        .HasColumnType("float");

                    b.Property<double?>("CritDmg")
                        .HasColumnType("float");

                    b.Property<double>("CurrentLP")
                        .HasColumnType("float");

                    b.Property<double?>("DefMagic")
                        .HasColumnType("float");

                    b.Property<double?>("DefMelee")
                        .HasColumnType("float");

                    b.Property<double?>("DefPierce")
                        .HasColumnType("float");

                    b.Property<string>("EnemyNPCName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FullLP")
                        .HasColumnType("float");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("EnemyNPCID");

                    b.ToTable("EnemyNPCs");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.HasKey("InventoryID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"));

                    b.Property<int?>("ArmorType")
                        .HasColumnType("int");

                    b.Property<double?>("AtkMagic")
                        .HasColumnType("float");

                    b.Property<double?>("AtkMelee")
                        .HasColumnType("float");

                    b.Property<double?>("AtkPierce")
                        .HasColumnType("float");

                    b.Property<double?>("Crit")
                        .HasColumnType("float");

                    b.Property<double?>("CritDmg")
                        .HasColumnType("float");

                    b.Property<double?>("DefMagic")
                        .HasColumnType("float");

                    b.Property<double?>("DefMelee")
                        .HasColumnType("float");

                    b.Property<double?>("DefPierce")
                        .HasColumnType("float");

                    b.Property<double?>("Dex")
                        .HasColumnType("float");

                    b.Property<double?>("End")
                        .HasColumnType("float");

                    b.Property<double?>("Experience")
                        .HasColumnType("float");

                    b.Property<double?>("FullLP")
                        .HasColumnType("float");

                    b.Property<double?>("Int")
                        .HasColumnType("float");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<double?>("ItemValue")
                        .HasColumnType("float");

                    b.Property<double?>("LP")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerGold")
                        .HasColumnType("float");

                    b.Property<double?>("Str")
                        .HasColumnType("float");

                    b.Property<int?>("UpgradeItemSlots")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponType")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerID"));

                    b.Property<double>("AtkMagic")
                        .HasColumnType("float");

                    b.Property<double>("AtkMelee")
                        .HasColumnType("float");

                    b.Property<double>("AtkPierce")
                        .HasColumnType("float");

                    b.Property<int?>("ChestItemID")
                        .HasColumnType("int");

                    b.Property<double>("Crit")
                        .HasColumnType("float");

                    b.Property<double>("CritDmg")
                        .HasColumnType("float");

                    b.Property<double>("CurrentLP")
                        .HasColumnType("float");

                    b.Property<double>("DefMagic")
                        .HasColumnType("float");

                    b.Property<double>("DefMelee")
                        .HasColumnType("float");

                    b.Property<double>("DefPierce")
                        .HasColumnType("float");

                    b.Property<double>("Dex")
                        .HasColumnType("float");

                    b.Property<double>("End")
                        .HasColumnType("float");

                    b.Property<double>("Experience")
                        .HasColumnType("float");

                    b.Property<int?>("FeetItemID")
                        .HasColumnType("int");

                    b.Property<double>("FullLP")
                        .HasColumnType("float");

                    b.Property<int?>("HeadItemID")
                        .HasColumnType("int");

                    b.Property<double>("Int")
                        .HasColumnType("float");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("MainhandItemID")
                        .HasColumnType("int");

                    b.Property<int?>("OffhandItemID")
                        .HasColumnType("int");

                    b.Property<double>("PlayerGold")
                        .HasColumnType("float");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShoulderItemID")
                        .HasColumnType("int");

                    b.Property<double>("Str")
                        .HasColumnType("float");

                    b.Property<int?>("TrousersItemID")
                        .HasColumnType("int");

                    b.HasKey("PlayerID");

                    b.HasIndex("ChestItemID");

                    b.HasIndex("FeetItemID");

                    b.HasIndex("HeadItemID");

                    b.HasIndex("MainhandItemID");

                    b.HasIndex("OffhandItemID");

                    b.HasIndex("ShoulderItemID");

                    b.HasIndex("TrousersItemID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.UpgradeItem", b =>
                {
                    b.Property<int>("UpgradeItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpgradeItemID"));

                    b.Property<double?>("AtkMagic")
                        .HasColumnType("float");

                    b.Property<double?>("AtkMelee")
                        .HasColumnType("float");

                    b.Property<double?>("AtkPierce")
                        .HasColumnType("float");

                    b.Property<double?>("Crit")
                        .HasColumnType("float");

                    b.Property<double?>("CritDmg")
                        .HasColumnType("float");

                    b.Property<double?>("DefMagic")
                        .HasColumnType("float");

                    b.Property<double?>("DefMelee")
                        .HasColumnType("float");

                    b.Property<double?>("DefPierce")
                        .HasColumnType("float");

                    b.Property<double?>("Dex")
                        .HasColumnType("float");

                    b.Property<double?>("End")
                        .HasColumnType("float");

                    b.Property<double?>("Experience")
                        .HasColumnType("float");

                    b.Property<double?>("FullLP")
                        .HasColumnType("float");

                    b.Property<double?>("Int")
                        .HasColumnType("float");

                    b.Property<int?>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<double?>("LP")
                        .HasColumnType("float");

                    b.Property<double?>("PlayerGold")
                        .HasColumnType("float");

                    b.Property<double?>("Str")
                        .HasColumnType("float");

                    b.Property<string>("UpgradeItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UpgradeItemValue")
                        .HasColumnType("float");

                    b.HasKey("UpgradeItemID");

                    b.HasIndex("ItemID");

                    b.ToTable("UpgradeItems");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.Player", b =>
                {
                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Chest")
                        .WithMany()
                        .HasForeignKey("ChestItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Feet")
                        .WithMany()
                        .HasForeignKey("FeetItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Head")
                        .WithMany()
                        .HasForeignKey("HeadItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Mainhand")
                        .WithMany()
                        .HasForeignKey("MainhandItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Offhand")
                        .WithMany()
                        .HasForeignKey("OffhandItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Shoulder")
                        .WithMany()
                        .HasForeignKey("ShoulderItemID");

                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", "Trousers")
                        .WithMany()
                        .HasForeignKey("TrousersItemID");

                    b.Navigation("Chest");

                    b.Navigation("Feet");

                    b.Navigation("Head");

                    b.Navigation("Mainhand");

                    b.Navigation("Offhand");

                    b.Navigation("Shoulder");

                    b.Navigation("Trousers");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.UpgradeItem", b =>
                {
                    b.HasOne("KingdomAdventure.Models.WorldArea.Item", null)
                        .WithMany("UpgradeItems")
                        .HasForeignKey("ItemID");
                });

            modelBuilder.Entity("KingdomAdventure.Models.WorldArea.Item", b =>
                {
                    b.Navigation("UpgradeItems");
                });
#pragma warning restore 612, 618
        }
    }
}
